#include <iostream>
#include <stdexcept>

template <typename T>
class Vector {
private:
    T* elements;  // Pointer pentru array-ul dinamic
    int length;   // Lungimea vectorului

public:
    // Constructor fără parametri
    Vector() : elements(nullptr), length(0) {}

    // Constructor cu parametru de lungime
    Vector(int size) : length(size) {
        elements = new T[size];
    }

    // Constructor de copiere
    Vector(const Vector& v) : length(v.length) {
        elements = new T[length];
        for (int i = 0; i < length; i++) {
            elements[i] = v.elements[i];
        }
    }

    // Destructor
    ~Vector() {
        delete[] elements;
    }

    // Suprascrierea operatorului []
    T& operator[](int index) {
        if (index < 0 || index >= length) {
            throw std::out_of_range("Index out of range");
        }
        return elements[index];
    }

    // Funcție pentru obținerea lungimii vectorului
    int getLength() const {
        return length;
    }

    // Suprascrierea operatorului +
    Vector operator+(const Vector& v) const {
        if (length != v.length) {
            throw std::invalid_argument("Vectors must be of the same size");
        }

        Vector result(length);
        for (int i = 0; i < length; i++) {
            result.elements[i] = elements[i] + v.elements[i];
        }
        return result;
    }

    // Suprascrierea operatorului -
    Vector operator-(const Vector& v) const {
        if (length != v.length) {
            throw std::invalid_argument("Vectors must be of the same size");
        }

        Vector result(length);
        for (int i = 0; i < length; i++) {
            result.elements[i] = elements[i] - v.elements[i];
        }
        return result;
    }

    // Suprascrierea operatorului de intrare
    friend std::istream& operator>>(std::istream& is, Vector& v) {
        for (int i = 0; i < v.length; i++) {
            is >> v.elements[i];
        }
        return is;
    }

    // Suprascrierea operatorului de ieșire
    friend std::ostream& operator<<(std::ostream& os, const Vector& v) {
        for (int i = 0; i < v.length; i++) {
            os << v.elements[i] << " ";
        }
        return os;
    }
};

int main() {
    Vector<int> v1(3);  // Vector de 3 elemente
    std::cout << "Enter 3 elements for v1: ";
    std::cin >> v1;

    Vector<int> v2(3);
    v2[0] = 1; v2[1] = 2; v2[2] = 3;

    Vector<int> v3 = v1 + v2;  // Adunarea vectorilor
    std::cout << "Sum of vectors (v1 + v2): " << v3 << std::endl;

    Vector<int> v4 = v1 - v2;  // Scăderea vectorilor
    std::cout << "Difference of vectors (v1 - v2): " << v4 << std::endl;

    return 0;
}
